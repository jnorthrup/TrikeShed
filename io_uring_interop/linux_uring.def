headers.linux = \
    stdlib.h                \
    stdio.h                 \
    string.h                \
    pthread.h               \
    signal.h                \
    stdatomic.h             \
    ctype.h                 \
    fcntl.h                 \
    unistd.h                \
    errno.h                 \
    liburing.h              \
    ur_syscall.h            \
    arpa/inet.h             \
    linux/fs.h              \
    linux/io_uring.h        \
    netinet/in.h            \
    netinet/tcp.h           \
    sys/ioctl.h             \
    sys/mman.h              \
    sys/resource.h          \
    sys/socket.h            \
    sys/stat.h              \
    sys/syscall.h           \
    sys/types.h             \
    sys/uio.h               \
    sys/un.h                \
    sys/wait.h              \
    iop.h
#ac.h
#headerFilter = liburing/* sys/*
compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu -Iliburing/src/include -Iio_uring_interop
linkerOpts.linux = -Lliburing/lib  -luring -luring-ffi
---

#define CATQUEUE_DEPTH 256
#define BLOCK_SZ    1024

struct file_info {
    off_t file_sz;
    struct iovec iovecs[];      /* Referred by readv/writev */
};

//  struct p_t{
//      int triggered  ;
//       int fd[2];
//  };
//  static int NFILES = 5000;
//  static struct p_t *p ;

/* This is x86 specific
#define read_barrier()  __asm__ __volatile__("":::"memory")
#define write_barrier() __asm__ __volatile__("":::"memory") */

static inline void  read_barrier() { __asm__ __volatile__("" ::: "memory") ;}
static inline void  write_barrier() { __asm__ __volatile__("" ::: "memory"); }

enum t_setup_ret {
	T_SETUP_OK	= 0,
	T_SETUP_SKIP,
};

/**
 * when this macro appears it is always with params  ( sq.pointed.ktail, tail + x)
 */
void io_uring_smp_store_release_tail (const struct io_uring_sq *sq, unsigned int newtail) {
io_uring_smp_store_release(sq->ktail, newtail);
}



#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
static inline void io_uring_prep_writevFail(struct io_uring_sqe *sqe, int fd,
					const struct iovec *iovecs,
					unsigned nr_vecs, __u64 offset)
{
	io_uring_prep_rw(IORING_OP_WRITEV, sqe, fd, NULL, nr_vecs, offset);
}




