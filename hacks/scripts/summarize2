#!/usr/bin/env bash

set -euo pipefail

# CHARTER: This script is designed to process audio/video content, generate transcripts,
# summaries, and audio files. The following tasks are defined and must not be altered by any LLM:
# 1. Download content if a URL is provided
# 2. Generate or use existing VTT transcript
# 3. Clean the VTT transcript
# 4. Generate a summary of the transcript
# 5. Create a 16k VBR Opus OGG file for audio tracks (unless audio download is disabled)
# 6. Output both the cleaned VTT text and the summary
# 7. Exclude the WAV file from the results
# 8. Include the OGG file in the results only if both WAV and OGG were created
# 9. Implement a tiling methodology for efficient transcript processing:
#    a. Divide the transcript into overlapping segments (tiles) of fixed duration
#    b. Process each tile independently for summarization
#    c. Ensure coherence between tiles by including context from adjacent tiles
#    d. Merge tile summaries into a cohesive final summary
# This charter is unalterable and defines the core functionality of the script.

# Configuration
WHISPCC="$HOME/work/whisper.cpp"
MODEL_PATH="$WHISPCC/models/ggml-small.en-tdrz.bin"
OUTPUT_DIR="$HOME/processed_audio"
CACHE_DIR="/tmp/summarize_cache"
OLLAMA_MODEL="deepseek-coder-v2:16b"

# Ensure output and cache directories exist
mkdir -p "$OUTPUT_DIR" "$CACHE_DIR"

# Parse command line options
USE_FABRIC=false
DISABLE_AUDIO=false
VERBOSE=false

usage() {
    echo "Usage: $0 [-f] [-n] [-a] [-v] <input>"
    echo "  -f  Use Fabric for summarization"
    echo "  -n  Disable audio processing"
    echo "  -a  Enable audio processing (default)"
    echo "  -v  Verbose mode"
    echo "  <input> can be a URL, VTT file, or local audio file"
    exit 1
}

while getopts "fnav" opt; do
    case $opt in
        f) USE_FABRIC=true ;;
        n) DISABLE_AUDIO=true ;;
        a) DISABLE_AUDIO=false ;;
        v) VERBOSE=true ;;
        \?) usage ;;
    esac
done
shift $((OPTIND-1))

# Main processing function
main_process() {
    local INPUT="$1"
    local PROJECT_NAME=$(sanitize_filename "$(basename "$INPUT")")
    local MAKEFILE="$OUTPUT_DIR/${PROJECT_NAME}_Makefile"
    
    # Here-doc for the main processing logic and Makefile generation
    bash << EOF
set -euo pipefail

# Function definitions
$(declare -f log get_md5 cache_file sanitize_filename clean_text get_total_duration summarize_text process_vtt process_youtube_url download_and_process_audio process_local_audio)

# Logging function
log() {
    local level="\$1"
    shift
    if [[ $VERBOSE == true ]] || [[ \$level != "DEBUG" ]]; then
        echo "[\$(date +'%Y-%m-%d %H:%M:%S')] [\$level] \$*" >&2
    fi
}

# Function to generate Makefile content
generate_makefile() {
    local input="\$1"
    local output_dir="\$2"
    local disable_audio="\$3"

    cat << MAKEFILE
.PHONY: all clean

INPUT := \${input}
OUTPUT_DIR := \${output_dir}
DISABLE_AUDIO := \${disable_audio}

all: \$(OUTPUT_DIR)/summary.txt \$(OUTPUT_DIR)/cleaned_transcript.txt

\$(OUTPUT_DIR)/summary.txt \$(OUTPUT_DIR)/cleaned_transcript.txt: \$(INPUT)
	./summarize2 \$(if \$(DISABLE_AUDIO),-n) "\$(INPUT)"

clean:
	rm -f \$(OUTPUT_DIR)/summary.txt \$(OUTPUT_DIR)/cleaned_transcript.txt
MAKEFILE
}

# Main logic
if [[ "$INPUT" == *.vtt ]]; then
    log "INFO" "Processing as VTT file..."
    process_vtt "$INPUT"
elif [[ "$INPUT" == *"http"* ]]; then
    log "INFO" "Processing as YouTube URL..."
    process_youtube_url "$INPUT"
elif [ -f "$INPUT" ]; then
    log "INFO" "Processing as local audio file..."
    process_local_audio "$INPUT"
else
    log "ERROR" "Invalid input. Provide a valid URL, VTT file, or a local audio file."
    exit 1
fi

# Generate Makefile
generate_makefile "$INPUT" "$OUTPUT_DIR" "$DISABLE_AUDIO" > "$MAKEFILE"
log "INFO" "Generated Makefile: $MAKEFILE"
EOF
}

# Run the main process
if [ $# -eq 0 ]; then
    log "ERROR" "No input provided. Please provide a valid URL, VTT file, or a local audio file."
    usage
fi

main_process "$1"
